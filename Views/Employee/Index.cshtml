@model IEnumerable<Web_APP_BTL.Models.Employee>
<style>
    .container {
        display: flex;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .search-panel {
        width: 170px;
        margin-right: 20px;
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 5px;
    }

    .table-container {
        flex: 1;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }

        .table th {
            background-color: #f2f2f2;
        }

    .btn-add {
        display: inline-block;
        margin-bottom: 10px;
        padding: 8px 12px;
        color: #fff;
        background-color: #28a745;
        text-decoration: none;
        border-radius: 4px;
    }

    .overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .overlay-content {
        width: 90%;
        max-width: 600px;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        transform: scale(0.9);
        opacity: 0;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

        .overlay-content.show {
            transform: scale(1);
            opacity: 1;
        }

    .loading {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1100;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .btn-success {
        background-color: #0066cc;
        border-color: #004080;
        color: #ffffff;
        width: 100px;
        padding: 10px 0;
        border-radius: 6px;
    }
</style>

<div class="container">
    <div class="search-panel">
        <h3>Tìm kiếm nhân viên</h3>
        <div class="form-group">
            <input type="text"
                   id="searchInput"
                   class="form-control"
                   placeholder="Tìm theo mã, tên nhân viên"
                   onkeyup="searchEmployees()">
        </div>
    </div>

    <div class="table-container">
        
        <button type="button" class="btn btn-success mb-3" onclick="openAddOverlay();window.location.href='@Url.Action("Create","Employee")'">
            <i class="fas fa-plus"></i> Thêm nhân viên
        </button>
        
        <table class="table">
            <thead>
                <tr>
                    <th>Mã nhân viên</th>
                    <th>Tên nhân viên</th>
                    <th>Email</th>
                    <th>Số điện thoại</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in Model)
                {
                    <tr>
                        <td>@employee.EmpId</td>
                        <td>@employee.EmpName</td>
                        <td>@employee.Email</td>
                        <td>@employee.Phone</td>
                        <td>
                            <button type="button" class="btn btn-info btn-sm" onclick="openDetailsOverlay(@employee.EmpId)">
                                <i class="fas fa-eye"></i> Xem chi tiết
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" onclick="openEditOverlay(@employee.EmpId)">
                                <i class="fas fa-edit"></i> Sửa
                            </button>
                            <button type="button" class="btn btn-danger btn-sm"
                                    onclick="openDeleteEmployeeOverlay(@employee.EmpId, '@employee.EmpName')">
                                <i class="fas fa-trash"></i> Xóa
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div id="editEmployeeOverlay" class="overlay" style="display:none;">
    <div class="overlay-content">
        <h3>Chỉnh sửa nhân viên</h3>
        <form id="editEmployeeForm">
            <input type="hidden" id="editEmpId" name="EmpId" />
            <div class="form-group">
                <label for="editEmpName">Tên nhân viên</label>
                <input type="text" id="editEmpName" name="EmpName" class="form-control" />
            </div>
            <div class="form-group">
                <label for="editEmail">Email</label>
                <input type="email" id="editEmail" name="Email" class="form-control" />
            </div>
            <div class="form-group">
                <label for="editPhone">Số điện thoại</label>
                <input type="text" id="editPhone" name="Phone" class="form-control" />
            </div>
            <button type="button" class="btn btn-primary" onclick="submitEditForm()">Lưu</button>
            <button type="button" class="btn btn-secondary" onclick="closeEditOverlay()">Đóng</button>

        </form>
    </div>
</div>

<div class="overlay" id="deleteEmployeeOverlay" style="display:none;">
    <div class="overlay-content">
        <h3>Xác nhận xóa</h3>
        <p>Bạn có chắc chắn muốn xóa nhân viên <strong id="employeeNameToDelete"></strong>?</p>
        <div class="mt-4">
            <button class="btn btn-danger" onclick="confirmDeleteEmployee()">Xóa</button>
            <button class="btn btn-secondary" onclick="closeDeleteEmployeeOverlay()">Hủy</button>
        </div>
    </div>
</div>
@Html.Partial("Create", new Web_APP_BTL.Models.Employee())
@section Scripts {

    <script>
        function openDetailsOverlay(employeeId) {
            window.location.href = `/Employee/Details/${employeeId}`;
        }

        // Tìm kiếm nhân viên
        function searchEmployees() {
            const searchValue = document.getElementById('searchInput').value.toLowerCase();
            const tableRows = document.querySelectorAll('.table tbody tr');

            tableRows.forEach(row => {
                const id = row.cells[0].textContent.toLowerCase();
                const name = row.cells[1].textContent.toLowerCase();
                const email = row.cells[2].textContent.toLowerCase();
                const phone = row.cells[3].textContent.toLowerCase();

                if (id.includes(searchValue) || name.includes(searchValue) || email.includes(searchValue) || phone.includes(searchValue)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Xử lý Add
        function openAddOverlay() {
            const overlay = document.getElementById("addEmployeeOverlay");
            overlay.style.display = "flex";
            setTimeout(() => overlay.querySelector(".overlay-content").classList.add("show"), 10);
        }

        function closeAddOverlay() {
            const overlayContent = document.getElementById("addEmployeeOverlay").querySelector(".overlay-content");
            overlayContent.classList.remove("show");
            setTimeout(() => document.getElementById("addEmployeeOverlay").style.display = "none", 300);
        }

        function openEditOverlay(employeeId) {
            fetch(`/Employee/GetEmployeeById/${employeeId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        document.getElementById('editEmpId').value = data.empId;
                        document.getElementById('editEmpName').value = data.empName;
                        document.getElementById('editEmail').value = data.email;
                        document.getElementById('editPhone').value = data.phone;
                        const overlay = document.getElementById("editEmployeeOverlay");
                        overlay.style.display = "flex";
                        setTimeout(() => overlay.querySelector(".overlay-content").classList.add("show"), 10);
                    }
                })
                .catch(error => console.error('Error fetching employee data:', error));
        }

        function closeEditOverlay() {
            const overlayContent = document.getElementById("editEmployeeOverlay").querySelector(".overlay-content");
            overlayContent.classList.remove("show");
            setTimeout(() => document.getElementById("editEmployeeOverlay").style.display = "none", 300);
        }
        function submitEditForm() {
            const formData = {
                EmpId: document.getElementById("editEmpId").value, // ID nhân viên
                EmpName: document.getElementById("editEmpName").value, // Tên nhân viên
                Email: document.getElementById("editEmail").value, // Email
                Phone: document.getElementById("editPhone").value, // Số điện thoại

                // Thêm các trường khác nếu cần
            };

            // Lấy giá trị của AntiForgeryToken từ input ẩn
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch(`/Employee/Edit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token // Gửi token CSRF cùng với yêu cầu
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (response.ok) {
                        closeEditOverlay(); // Đóng overlay
                        location.reload(); // Reload lại trang để cập nhật danh sách
                    } else {
                        return response.json().then(data => {
                            console.error('Lỗi khi cập nhật nhân viên:', data.message); // Hiển thị thông điệp lỗi từ server
                        });
                    }
                })
                .catch(error => console.error('Có lỗi xảy ra:', error));
        }
        let employeeIdToDelete = null; // Biến để lưu ID nhân viên cần xóa

        // Hàm hiển thị overlay xóa và cập nhật thông tin nhân viên cần xóa
        function openDeleteEmployeeOverlay(employeeId, employeeName) {
            employeeIdToDelete = employeeId;
            document.getElementById("employeeNameToDelete").innerText = employeeName; // Đảm bảo ID đúng
            const deleteOverlay = document.getElementById("deleteEmployeeOverlay");
            deleteOverlay.style.display = 'flex';
            setTimeout(() => deleteOverlay.querySelector(".overlay-content").classList.add("show"), 10);
        }

        // Hàm ẩn overlay xóa nhân viên
        function closeDeleteEmployeeOverlay() {
            employeeIdToDelete = null;
            const deleteOverlayContent = document.getElementById("deleteEmployeeOverlay").querySelector(".overlay-content");
            deleteOverlayContent.classList.remove("show");
            setTimeout(() => document.getElementById("deleteEmployeeOverlay").style.display = "none", 300);
        }

        // Hàm xác nhận xóa nhân viên
        function confirmDeleteEmployee() {
            if (employeeIdToDelete) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(`/Employee/DeleteConfirmed/${employeeIdToDelete}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            closeDeleteEmployeeOverlay();
                            location.reload(); // Tải lại trang sau khi xóa
                        } else {
                            throw new Error('Lỗi khi xóa nhân viên');
                        }
                    })
                    .catch(error => console.error("Lỗi khi thực hiện yêu cầu xóa:", error));
            }
        }
    </script>
}